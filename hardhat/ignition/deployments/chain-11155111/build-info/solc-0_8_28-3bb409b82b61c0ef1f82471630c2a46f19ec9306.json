{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-3bb409b82b61c0ef1f82471630c2a46f19ec9306",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/DemosManagement.sol": "project/contracts/DemosManagement.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/DemosManagement.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\n\r\nimport \"./interface/IActivitiesManagement.sol\";\r\nimport \"./interface/IDemosManagement.sol\";\r\nimport \"./interface/IAuthorityManagement.sol\";\r\n\r\ncontract DemosManagement is IDemosManagement { \r\n\r\n    event DemoSubmitted(uint256 indexed activityId, Demo demo);\r\n\r\n    IActivitiesManagement private activitiesManagement;\r\n    IAuthorityManagement private authorityManagement;\r\n\r\n    mapping(uint256 => Demo[]) public demos;// activityId => demoId => Demo\r\n\r\n    constructor(address _activitiesManagementAddress, address _authorityManagementAddress) {\r\n        activitiesManagement = IActivitiesManagement(_activitiesManagementAddress);\r\n        authorityManagement = IAuthorityManagement(_authorityManagementAddress);\r\n    }\r\n\r\n    function submitDemo(uint256 _activityId, uint256 _cohortId,string memory _dataCID) public onlyValidTime(_activityId)\r\n    {\r\n        require(activitiesManagement.isParticipantInActivity(_activityId, msg.sender), \"Not a participant of this activity\");\r\n        uint256 demoId = demos[_activityId].length; \r\n        Demo memory newDemo = Demo({\r\n            demoId: demoId,\r\n            activityId: _activityId,\r\n            dataCID: _dataCID,\r\n            submitter: msg.sender,\r\n            cohortId: _cohortId\r\n        });\r\n        demos[_activityId].push(newDemo);\r\n        emit DemoSubmitted(_activityId, newDemo);\r\n    }\r\n/*    \r\n    function updateDemo(uint256 _activityId, uint256 _demoId, string memory _dataCID, string memory _vedioCID) public onlyValidTime(_activityId)\r\n    {\r\n        require(activitiesManagement.isParticipantInActivity(_activityId, msg.sender), \"Not a participant of this activity\");\r\n        require(_demoId >= 0 && _demoId <= demos[_activityId].length, \"Invalid demo ID\");\r\n        Demo storage demoToUpdate = demos[_activityId][_demoId];\r\n        require(demoToUpdate.submitter == msg.sender, \"Not the submitter of this demo\");\r\n        demoToUpdate.dataCID = _dataCID;\r\n        demoToUpdate.vedioCID = _vedioCID;\r\n        emit DemoUpdated(_activityId, demoToUpdate);\r\n    }\r\n*/\r\n    function getDemoCohortId(uint256 _activityId, uint256 _demoId) public view returns(uint256) {\r\n        require(_demoId >= 0 && _demoId <= demos[_activityId].length, \"Invalid demo ID\");\r\n        require(activitiesManagement.isActivityIdValid(_activityId), \"Invalid activity ID\");\r\n        return demos[_activityId][_demoId].cohortId;\r\n    }\r\n\r\n    // 添加更新依赖合约地址的方法\r\n    function updateDependencies(address _activitiesManagementAddress) public onlyOwner(){\r\n        activitiesManagement = IActivitiesManagement(_activitiesManagementAddress);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == authorityManagement.getOwner(), \"Not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyValidTime(uint256 _activityId) {\r\n        require(activitiesManagement.isActivityIdValid(_activityId), \"Invalid activity ID\");\r\n        require(activitiesManagement.isHackthonOpen(_activityId), \"Not in hackthon time\");\r\n        _;\r\n    }\r\n}"
      },
      "project/contracts/interface/IActivitiesManagement.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\n\r\ninterface IActivitiesManagement {\r\n    function isParticipantInActivity(uint256 _activityId, address _user) external view returns (bool);\r\n    function getCreatorOfActivity(uint256 _activityId) external view returns (address);\r\n    function isActivityIdValid(uint256 _activityId) external view returns (bool);\r\n    function getActivity(uint256 _activityId) external view returns (Activity memory);\r\n    function isRegistrationOpen(uint256 _activityId) external view returns (bool);\r\n    function isJudgementOpen(uint256 _activityId) external view returns (bool);\r\n    function isHackthonOpen(uint256 _activityId) external view returns (bool);\r\n\r\n    struct Duration {\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n    }\r\n    \r\n    struct Activity {\r\n        string dataCID;\r\n        string topic;\r\n        address creator;\r\n        uint256 maxParticipants;\r\n        uint256 cuParticipants;\r\n        uint256 activityId;\r\n        Duration judgementDuration;\r\n        Duration registerDuration;\r\n        Duration hackthonDuration;\r\n    }\r\n}"
      },
      "project/contracts/interface/IAuthorityManagement.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\n\r\ninterface IAuthorityManagement {\r\n    function isAdmin(address _admin) external view returns (bool);\r\n    function isBlockedUser(address _user) external view returns (bool);\r\n    function isAnOrganizer(address _organizer) external view returns (bool);\r\n    function getOwner() external view returns (address);\r\n}"
      },
      "project/contracts/interface/IDemosManagement.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\n\r\ninterface IDemosManagement {\r\n    struct Demo {\r\n        uint256 demoId;\r\n        uint256 activityId;\r\n        uint256 cohortId;\r\n        string dataCID;\r\n        address submitter;\r\n    }\r\n    \r\n    function getDemoCohortId(uint256 _activityId, uint256 _demoId) external view returns(uint256);\r\n}"
      }
    }
  }
}