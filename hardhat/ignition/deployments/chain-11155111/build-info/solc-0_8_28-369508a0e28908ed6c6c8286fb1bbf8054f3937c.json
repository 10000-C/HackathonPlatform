{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-369508a0e28908ed6c6c8286fb1bbf8054f3937c",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/ActivitiesManagement.sol": "project/contracts/ActivitiesManagement.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/ActivitiesManagement.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\n\r\nimport \"./interface/IAuthorityManagement.sol\";\r\nimport \"./interface/IActivitiesManagement.sol\";\r\n\r\ncontract ActivitiesManagement is IActivitiesManagement { \r\n    event ActivityCreated(uint256 indexed activityId, Activity activity);\r\n    event ActivityUpdated(uint256 indexed activityId, Activity activity);\r\n    event ParticipantAdded(uint256 indexed activityId, address participant);\r\n    event ParticipantRemoved(uint256 indexed activityId, address participant);\r\n    event ActivityDeleted(uint256 indexed activityId, address user);\r\n    \r\n\r\n    mapping(uint256 => mapping(address => bool)) public isParticipant;\r\n    IAuthorityManagement private authorityManagement;\r\n    \r\n    mapping(uint256 => Activity) public activities;\r\n    uint256 public activityCount; \r\n    \r\n    constructor(address _authorityManagementAddress) {\r\n        authorityManagement = IAuthorityManagement(_authorityManagementAddress);\r\n    }\r\n\r\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\r\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\r\n    }\r\n\r\n    function createActivity(\r\n        string memory _dataCID,\r\n        string memory _topic,\r\n        uint256 _maxParticipants,\r\n        uint256 _cuParticipants,\r\n        uint256 _hackthonStartTime,\r\n        uint256 _hackthonEndTime,\r\n        uint256 _judgeStartTime,\r\n        uint256 _judgeEndTime,\r\n        uint256 _registerStartTime,\r\n        uint256 _registerEndTime\r\n    ) public onlyOrganizer {\r\n        activityCount++;\r\n        Activity memory newActivity = Activity({\r\n            dataCID: _dataCID,\r\n            creator: msg.sender,\r\n            maxParticipants: _maxParticipants,\r\n            cuParticipants: _cuParticipants,\r\n            activityId: activityCount,\r\n            topic: _topic,\r\n            registerDuration: Duration(_registerStartTime, _registerEndTime),\r\n            judgementDuration: Duration(_judgeStartTime, _judgeEndTime),\r\n            hackthonDuration: Duration(_hackthonStartTime, _hackthonEndTime)\r\n        });\r\n        activities[activityCount] = newActivity;\r\n        emit ActivityCreated(activityCount, newActivity);\r\n    }\r\n/*\r\n    function updateActivity(\r\n        uint256 _activityId,\r\n        string memory _dataCID,\r\n        string memory _topic,\r\n        uint256 _maxParticipants\r\n    ) public onlyOrganizer {\r\n        require(_activityId > 0 && _activityId <= activityCount, \"Invalid activity ID\");\r\n        require(activities[_activityId].creator == msg.sender, \"Not the creator of the activity\");\r\n        Activity storage activity = activities[_activityId];\r\n        activity.dataCID = _dataCID;\r\n        activity.topic = _topic;\r\n        activity.maxParticipants = _maxParticipants;\r\n        emit ActivityUpdated(_activityId, activity);\r\n    }\r\n\r\n    function deleteActivity(uint256 _activityId) public onlyOrganizer {\r\n        require(_activityId > 0 && _activityId <= activityCount, \"Invalid activity ID\");\r\n        require(activities[_activityId].creator != address(0), \"Activity does not exist\");\r\n        require(activities[_activityId].creator == msg.sender, \"Not the creator of the activity\");\r\n        delete activities[_activityId];\r\n        emit ActivityDeleted(_activityId, msg.sender);\r\n    } \r\n*/\r\n    function deleteActivityForAdmin(uint256 _activityId) public onlyAdmin {\r\n        require(_activityId > 0 && _activityId <= activityCount, \"Invalid activity ID\");\r\n        require(activities[_activityId].creator != address(0), \"Activity does not exist\");\r\n        delete activities[_activityId];\r\n        emit ActivityDeleted(_activityId, msg.sender);\r\n    }\r\n\r\n    function getActivity(uint256 _activityId) public view returns (Activity memory) {\r\n        require(_activityId > 0 && _activityId <= activityCount, \"Invalid activity ID\");\r\n        require(activities[_activityId].creator != address(0), \"Activity does not exist\");\r\n        return activities[_activityId];\r\n    }\r\n\r\n    function participateInActivity(uint256 _activityId) public onlyLegalUser {\r\n        require(_activityId > 0 && _activityId <= activityCount, \"Invalid activity ID\");\r\n        require(isParticipant[_activityId][msg.sender] == false, \"Already participated in this activity\");\r\n        require(activities[_activityId].cuParticipants<activities[_activityId].maxParticipants, \"Activity is full\");\r\n        require(isRegistrationOpen(_activityId), \"Registration is not open\");\r\n        \r\n        isParticipant[_activityId][msg.sender] = true;\r\n        activities[_activityId].cuParticipants++;\r\n        emit ParticipantAdded(_activityId, msg.sender);\r\n    } \r\n\r\n    function withdrawFromActivity(uint256 _activityId) public onlyLegalUser {\r\n        require(_activityId > 0 && _activityId <= activityCount, \"Invalid activity ID\");\r\n        require(isParticipant[_activityId][msg.sender] == true, \"Not a participant in this activity\");\r\n        \r\n        isParticipant[_activityId][msg.sender] = false;\r\n        activities[_activityId].cuParticipants--;\r\n        emit ParticipantRemoved(_activityId, msg.sender);\r\n    }\r\n\r\n    function isParticipantInActivity(uint256 _activityId, address _user) public view returns (bool) {\r\n        require(_activityId > 0 && _activityId <= activityCount, \"Invalid activity ID\");\r\n        return isParticipant[_activityId][_user];\r\n    }\r\n\r\n    // for Judgement management verifies the creator of the activity\r\n    function getCreatorOfActivity(uint256 _activityId) public view returns (address) {\r\n        require(_activityId > 0 && _activityId <= activityCount, \"Invalid activity ID\");\r\n        return activities[_activityId].creator;\r\n    }\r\n\r\n    function isActivityIdValid(uint256 _activityId) public view returns (bool) {\r\n        return _activityId > 0 && _activityId <= activityCount;\r\n    }\r\n\r\n    // 添加更新 AuthorityManagement 地址的方法\r\n    function updateDependencies(address _newAuthorityManagementAddress) public onlyOwner{\r\n        authorityManagement = IAuthorityManagement(_newAuthorityManagementAddress);\r\n    }\r\n\r\n    function isRegistrationOpen(uint256 _activityId) public view returns (bool) {\r\n        require(_activityId > 0 && _activityId <= activityCount, \"Invalid activity ID\");\r\n        Activity memory activity = activities[_activityId];\r\n        uint256 currentTime = block.timestamp;\r\n        return currentTime >= activity.registerDuration.startTime && currentTime <= activity.registerDuration.endTime;\r\n    }\r\n\r\n    function isJudgementOpen(uint256 _activityId) public view returns (bool) {\r\n        require(_activityId > 0 && _activityId <= activityCount, \"Invalid activity ID\");\r\n        Activity memory activity = activities[_activityId];\r\n        uint256 currentTime = block.timestamp;\r\n        return currentTime >= activity.judgementDuration.startTime && currentTime <= activity.judgementDuration.endTime;\r\n    }\r\n\r\n    function isHackthonOpen(uint256 _activityId) public view returns (bool) {\r\n        require(_activityId > 0 && _activityId <= activityCount, \"Invalid activity ID\");\r\n        Activity memory activity = activities[_activityId];\r\n        uint256 currentTime = block.timestamp;\r\n        return currentTime >= activity.hackthonDuration.startTime && currentTime <= activity.hackthonDuration.endTime;\r\n    }\r\n\r\n    modifier onlyOrganizer() {\r\n        require(authorityManagement.isAnOrganizer(msg.sender), \"Not an organizer\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyLegalUser() {\r\n        require(!authorityManagement.isBlockedUser(msg.sender), \"User is blocked\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(authorityManagement.isAdmin(msg.sender), \"Not an admin\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == authorityManagement.getOwner(), \"Not the owner\");\r\n        _;\r\n    }\r\n}"
      },
      "project/contracts/interface/IActivitiesManagement.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\n\r\ninterface IActivitiesManagement {\r\n    function isParticipantInActivity(uint256 _activityId, address _user) external view returns (bool);\r\n    function getCreatorOfActivity(uint256 _activityId) external view returns (address);\r\n    function isActivityIdValid(uint256 _activityId) external view returns (bool);\r\n    function getActivity(uint256 _activityId) external view returns (Activity memory);\r\n    function isRegistrationOpen(uint256 _activityId) external view returns (bool);\r\n    function isJudgementOpen(uint256 _activityId) external view returns (bool);\r\n    function isHackthonOpen(uint256 _activityId) external view returns (bool);\r\n\r\n    struct Duration {\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n    }\r\n    \r\n    struct Activity {\r\n        string dataCID;\r\n        string topic;\r\n        address creator;\r\n        uint256 maxParticipants;\r\n        uint256 cuParticipants;\r\n        uint256 activityId;\r\n        Duration judgementDuration;\r\n        Duration registerDuration;\r\n        Duration hackthonDuration;\r\n    }\r\n}"
      },
      "project/contracts/interface/IAuthorityManagement.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\n\r\ninterface IAuthorityManagement {\r\n    function isAdmin(address _admin) external view returns (bool);\r\n    function isBlockedUser(address _user) external view returns (bool);\r\n    function isAnOrganizer(address _organizer) external view returns (bool);\r\n    function getOwner() external view returns (address);\r\n}"
      }
    }
  }
}